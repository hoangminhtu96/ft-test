{
  "contractName": "MockPVE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inviter",
          "type": "address"
        }
      ],
      "name": "validateInviter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"validateInviter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/dung/Documents/sources/fota-dapp/contracts/games/mockPVE.sol\":\"MockPVE\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"/Users/dung/Documents/sources/fota-dapp/contracts/games/mockPVE.sol\":{\"keccak256\":\"0x8382a88d1387fb05cf8bc8eb608c38cd5760e0dfadf0d23b39942b592c6c1dc2\",\"license\":\"GPL\",\"urls\":[\"bzz-raw://6ad49afb3f04a8c0f323974b8853651619d1863f9b4a9c967cf40c28efb769fb\",\"dweb:/ipfs/QmXErEYkjinCz4vujhnxD7nvUvLSVGwidgohmn4Qs5YwPf\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060e48061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063307a22a214602d575b600080fd5b603c6038366004606a565b6050565b6040516047919060a3565b60405180910390f35b73ffffffffffffffffffffffffffffffffffffffff161590565b600060208284031215607a578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114609c578182fd5b9392505050565b90151581526020019056fea26469706673582212208a62d9acf6b021c44d575a06a7e77e8843e2880832df8e9180f649707a7e2bb164736f6c63430008000033",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063307a22a214602d575b600080fd5b603c6038366004606a565b6050565b6040516047919060a3565b60405180910390f35b73ffffffffffffffffffffffffffffffffffffffff161590565b600060208284031215607a578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114609c578182fd5b9392505050565b90151581526020019056fea26469706673582212208a62d9acf6b021c44d575a06a7e77e8843e2880832df8e9180f649707a7e2bb164736f6c63430008000033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:537:73",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:73",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "84:259:73",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "130:26:73",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "139:6:73"
                            },
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "147:6:73"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "132:6:73"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "132:22:73"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "132:22:73"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "105:7:73"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "114:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "101:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "101:23:73"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "126:2:73",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "97:3:73"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "97:32:73"
                  },
                  "nodeType": "YulIf",
                  "src": "94:2:73"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "165:36:73",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "191:9:73"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "178:12:73"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "178:23:73"
                  },
                  "variables": [
                    {
                      "name": "value",
                      "nodeType": "YulTypedName",
                      "src": "169:5:73",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "287:26:73",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "296:6:73"
                            },
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "304:6:73"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "289:6:73"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "289:22:73"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "289:22:73"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "223:5:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "234:5:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "241:42:73",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "230:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "230:54:73"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "220:2:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "220:65:73"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "213:6:73"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "213:73:73"
                  },
                  "nodeType": "YulIf",
                  "src": "210:2:73"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "322:15:73",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "332:5:73"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "322:6:73"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "50:9:73",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "61:7:73",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "73:6:73",
                "type": ""
              }
            ],
            "src": "14:329:73"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "443:92:73",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "453:26:73",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "465:9:73"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "476:2:73",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "461:3:73"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "461:18:73"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "453:4:73"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "495:9:73"
                      },
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "520:6:73"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "513:6:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "513:14:73"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "506:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "506:22:73"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "488:6:73"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "488:41:73"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "488:41:73"
                }
              ]
            },
            "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "412:9:73",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "423:6:73",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "434:4:73",
                "type": ""
              }
            ],
            "src": "348:187:73"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n}",
      "id": 73,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "57:160:16:-:0;;;79:19;;;;;;;;;;57:160;;;;;;",
  "deployedSourceMap": "57:160:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;102:112;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;187:22;;;;102:112::o;14:329:73:-;;126:2;114:9;105:7;101:23;97:32;94:2;;;147:6;139;132:22;94:2;191:9;178:23;241:42;234:5;230:54;223:5;220:65;210:2;;304:6;296;289:22;210:2;332:5;84:259;-1:-1:-1;;;84:259:73:o;348:187::-;513:14;;506:22;488:41;;476:2;461:18;;443:92::o",
  "source": "// SPDX-License-Identifier: GPL\n\npragma solidity 0.8.0;\n\ncontract MockPVE {\n\n  constructor() {\n  }\n\n  function validateInviter(address _inviter) external pure returns (bool) {\n    return _inviter == address(0);\n  }\n\n}\n",
  "sourcePath": "/Users/dung/Documents/sources/fota-dapp/contracts/games/mockPVE.sol",
  "ast": {
    "absolutePath": "/Users/dung/Documents/sources/fota-dapp/contracts/games/mockPVE.sol",
    "exportedSymbols": {
      "MockPVE": [
        9776
      ]
    },
    "id": 9777,
    "license": "GPL",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 9756,
        "literals": [
          "solidity",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:22:16"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 9776,
        "linearizedBaseContracts": [
          9776
        ],
        "name": "MockPVE",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 9759,
              "nodeType": "Block",
              "src": "93:5:16",
              "statements": []
            },
            "id": 9760,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9757,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "90:2:16"
            },
            "returnParameters": {
              "id": 9758,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "93:0:16"
            },
            "scope": 9776,
            "src": "79:19:16",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 9774,
              "nodeType": "Block",
              "src": "174:40:16",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 9772,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 9767,
                      "name": "_inviter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9762,
                      "src": "187:8:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 9770,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "207:1:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 9769,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "199:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 9768,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "199:7:16",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 9771,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "199:10:16",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "187:22:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 9766,
                  "id": 9773,
                  "nodeType": "Return",
                  "src": "180:29:16"
                }
              ]
            },
            "functionSelector": "307a22a2",
            "id": 9775,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validateInviter",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9763,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9762,
                  "mutability": "mutable",
                  "name": "_inviter",
                  "nodeType": "VariableDeclaration",
                  "scope": 9775,
                  "src": "127:16:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9761,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "127:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "126:18:16"
            },
            "returnParameters": {
              "id": 9766,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9765,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 9775,
                  "src": "168:4:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 9764,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "168:4:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "167:6:16"
            },
            "scope": 9776,
            "src": "102:112:16",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 9777,
        "src": "57:160:16"
      }
    ],
    "src": "33:185:16"
  },
  "legacyAST": {
    "absolutePath": "/Users/dung/Documents/sources/fota-dapp/contracts/games/mockPVE.sol",
    "exportedSymbols": {
      "MockPVE": [
        9776
      ]
    },
    "id": 9777,
    "license": "GPL",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 9756,
        "literals": [
          "solidity",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:22:16"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 9776,
        "linearizedBaseContracts": [
          9776
        ],
        "name": "MockPVE",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 9759,
              "nodeType": "Block",
              "src": "93:5:16",
              "statements": []
            },
            "id": 9760,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9757,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "90:2:16"
            },
            "returnParameters": {
              "id": 9758,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "93:0:16"
            },
            "scope": 9776,
            "src": "79:19:16",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 9774,
              "nodeType": "Block",
              "src": "174:40:16",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 9772,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 9767,
                      "name": "_inviter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9762,
                      "src": "187:8:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 9770,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "207:1:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 9769,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "199:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 9768,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "199:7:16",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 9771,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "199:10:16",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "187:22:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 9766,
                  "id": 9773,
                  "nodeType": "Return",
                  "src": "180:29:16"
                }
              ]
            },
            "functionSelector": "307a22a2",
            "id": 9775,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validateInviter",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9763,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9762,
                  "mutability": "mutable",
                  "name": "_inviter",
                  "nodeType": "VariableDeclaration",
                  "scope": 9775,
                  "src": "127:16:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9761,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "127:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "126:18:16"
            },
            "returnParameters": {
              "id": 9766,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9765,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 9775,
                  "src": "168:4:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 9764,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "168:4:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "167:6:16"
            },
            "scope": 9776,
            "src": "102:112:16",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 9777,
        "src": "57:160:16"
      }
    ],
    "src": "33:185:16"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.0+commit.c7dfd78e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.4",
  "updatedAt": "2022-03-03T04:57:24.645Z",
  "networkType": "ethereum",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}